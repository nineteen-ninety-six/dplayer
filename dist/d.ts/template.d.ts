import * as DPlayerType from './types';
declare class Template {
    container: HTMLElement;
    options: DPlayerType.OptionsInternal;
    index: number;
    tran: (text: string) => string;
    volumeBar: HTMLElement;
    volumeBarWrap: HTMLElement;
    volumeBarWrapWrap: HTMLElement;
    volumeButton: HTMLElement;
    volumeButtonIcon: HTMLElement;
    volumeIcon: HTMLElement;
    playedBar: HTMLElement;
    loadedBar: HTMLElement;
    playedBarWrap: HTMLElement;
    playedBarTime: HTMLElement;
    danmaku: HTMLElement;
    danmakuLoading: HTMLElement;
    video: HTMLVideoElement;
    bezel: HTMLElement;
    playButton: HTMLElement;
    playIcon: HTMLElement;
    mobileBackwardButton: HTMLElement;
    mobilePlayButton: HTMLElement;
    mobileForwardButton: HTMLElement;
    videoWrap: HTMLElement;
    videoWrapAspect: HTMLElement;
    controllerMask: HTMLElement;
    ptime: HTMLElement;
    settingButton: HTMLElement;
    settingBox: HTMLElement;
    settingOriginPanel: HTMLElement;
    mask: HTMLElement;
    syncButton: HTMLElement;
    loop: HTMLElement;
    loopToggle: HTMLInputElement;
    showDanmaku: HTMLElement;
    showDanmakuToggle: HTMLInputElement;
    unlimitDanmaku: HTMLElement;
    unlimitDanmakuToggle: HTMLInputElement;
    quality: HTMLElement;
    qualityValue: HTMLElement;
    qualityHeader: HTMLElement;
    qualityItem: NodeListOf<HTMLElement>;
    speed: HTMLElement;
    speedValue: HTMLElement;
    speedHeader: HTMLElement;
    speedItem: NodeListOf<HTMLElement>;
    audio: HTMLElement;
    audioValue: HTMLElement;
    audioHeader: HTMLElement;
    audioItem: NodeListOf<HTMLElement>;
    danmakuOpacityBar: HTMLElement;
    danmakuOpacityBarWrap: HTMLElement;
    danmakuOpacityBarWrapWrap: HTMLElement;
    danmakuOpacityBox: HTMLElement;
    danmakuOpacityValue: HTMLElement;
    dtime: HTMLElement;
    controller: HTMLElement;
    commentInput: HTMLInputElement;
    commentButton: HTMLElement;
    commentSettingBox: HTMLElement;
    commentSettingButton: HTMLElement;
    commentSettingFill: HTMLElement;
    commentSendButton: HTMLElement;
    commentSendFill: HTMLElement;
    commentColorSettingBox: HTMLElement;
    browserFullButton: HTMLElement;
    webFullButton: HTMLElement;
    pipButton: HTMLElement;
    menu: HTMLElement;
    menuItem: NodeListOf<HTMLElement>;
    cameraButton: HTMLElement;
    airplayButton: HTMLElement;
    subtitleButton: HTMLElement;
    subtitleButtonInner: HTMLElement;
    subtitle: HTMLElement;
    barPreview: HTMLElement;
    barWrap: HTMLElement;
    notice: HTMLElement;
    infoPanel: HTMLElement;
    infoPanelClose: HTMLElement;
    infoMimeType: HTMLElement;
    infoVersion: HTMLElement;
    infoVideoFPS: HTMLElement;
    infoPageFPS: HTMLElement;
    infoDroppedFrames: HTMLElement;
    infoType: HTMLElement;
    infoUrl: HTMLElement;
    infoResolution: HTMLElement;
    infoDuration: HTMLElement;
    infoBufferRemain: HTMLElement;
    infoDownloadSpeed: HTMLElement;
    constructor(options: {
        container: HTMLElement;
        options: DPlayerType.OptionsInternal;
        index: number;
        tran: (text: string) => string;
    });
    init(): void;
}
export default Template;
//# sourceMappingURL=template.d.ts.map